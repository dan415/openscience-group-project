<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main" xml:id="_VqmE2k6">Comparison of Brotli, Deflate, Zopfli, LZMA, LZHAM and Bzip2 Compression Algorithms</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName coords="1,116.25,223.88,71.19,10.20"><forename type="first">Jyrki</forename><surname>Alakuijala</surname></persName>
						</author>
						<author>
							<persName coords="1,195.05,223.88,92.87,10.20"><forename type="first">Evgenii</forename><surname>Kliuchnikov</surname></persName>
						</author>
						<author>
							<persName coords="1,295.87,223.88,79.78,10.20"><forename type="first">Zoltan</forename><surname>Szabadka</surname></persName>
						</author>
						<author>
							<persName coords="1,405.86,223.88,89.24,10.20;1,276.00,238.88,33.00,10.20"><forename type="first">Lode</forename><forename type="middle">Vandevenne</forename><surname>Google</surname></persName>
						</author>
						<title level="a" type="main" xml:id="_DKbJNjR">Comparison of Brotli, Deflate, Zopfli, LZMA, LZHAM and Bzip2 Compression Algorithms</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">3F8A10433A5B359272F6F5F69445E21B</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.2" ident="GROBID" when="2023-05-07T13:56+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0" xml:id="_xNK33Aq"><p xml:id="_9nBvbsy">This paper compares six compression techniques, and based on the results proposes that brotli could be used as a replacement of the common deflate algorithm. We compared the performance of brotli by measuring the compression ratio and speed, as well as decompression speed on three different corpora: the Canterbury compression corpus, an ad hoc crawled web content corpus, and enwik8. On all three corpora we show performance superior to that of deflate. Further, we show that Zopfli, LZMA, LZHAM and bzip2 use significantly more CPU time for either compression or decompression and could not always work as direct replacements of deflate.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<facsimile>
		<surface n="1" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="2" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="3" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="4" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="5" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="6" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
	</facsimile>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head xml:id="_G2hEZSy">Introduction</head><p xml:id="_a8kjFDZ">Much of the practical lossless data compression is done with the deflate algorithm, not only because it is well supported by existing systems, but also because it is relatively simple and fast to encode and decode. In 2013 we launched Zopfli [1] , a compression algorithm that allows for denser compression while remaining compatible with the deflate format. While Zopfli is now wellaccepted in the field, there were opinions expressed that we should move on from the deflate file format to a modern solution. <ref type="bibr" coords="1,265.08,527.63,51.31,10.20">Brotli [2]</ref> is our attempt at building a compression format and an example implementation of this format that is fundamentally more efficient than deflate. In this paper we measure the performance of our implementation and compare it with deflate and a few other compression algorithms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head xml:id="_NqWYVyV">Methods</head><p xml:id="_GEHSEYK">The tests were run with a 22 bit window size for brotli, LZMA and LZHAM, and a 15 bit window size for deflate and zopfli. We used a 22 bit window size because past experience showed that larger windows can be slower to decode. Larger window sizes tend to give a higher compression ratio at the expense of decoding speed. For deflate and zopfli we used the maximum size allowed by the format. The versions of the algorithms tested are:</p><p xml:id="_zfwECuy">• brotli version 0.2.0 [2] ,</p><p xml:id="_NQTYC9x">• deflate algorithm from zlib 1.2.8 [3] ,</p><p xml:id="_5X56y3Q">• Zopfli version from github 20150901 [4] ,</p><p xml:id="_xutbwaz">• LZMA implementation in 7zip 9.20.1 [5] ,</p><p xml:id="_SH4VpMC">• LZHAM 1.0 stable 1 [6] , and • bzip2 1.0.6, 6Sept2010 <ref type="bibr" coords="2,231.44,149.63,23.22,10.20">[7]</ref> .</p><p xml:id="_Trp4HYt">The test computer we used is an Intel® Xeon® CPU E51650 v2 running at 3.5 GHz with six cores and six additional hyper threading contexts. We run linux 3.13.0. All codecs were compiled using the same compiler, GCC 4.8.4 at O2 level optimization. All tests were run singlethreaded on an otherwise idle computer.</p><p xml:id="_U3Ar9Z3">The compression corpora we used in the testing are the Canterbury compression corpus [8] , an ad hoc crawled web content corpus, 1'285 files, 70'611'753 bytes total, and enwik8, a single file corpus that is used in the Hutter prize <ref type="bibr" coords="2,257.13,284.63,23.22,10.20">[9]</ref> . The average file size on the web content corpus is only 55 kB, so the larger window size advantage of advanced algorithms over deflate mostly disappears there.</p><p xml:id="_uDsaDsn">We measured the compression ratio, compression speed and decompression speed for selected algorithms and compression levels. The compression and decompression speed of each algorithm were measured with the same benchmark program that called the compression and decompression routines of each algorithm from statically linked libraries.</p><p xml:id="_TDxJQbg">We limited the selection of algorithms to those that generally have a higher compression ratio than that of deflate. For this reason we excluded algorithms like lz4 and zstd from this study.</p><p xml:id="_4xuAB9U">Unlike other algorithms compared here, brotli includes a static dictionary. It contains 13'504 words or syllables of English, Spanish, Chinese, Hindi, Russian and Arabic, as well as common phrases used in machine readable languages, particularly HTML and JavaScript. The total size of the static dictionary is 122'784 bytes. The static dictionary is extended by a mechanism of transforms that slightly change the words in the dictionary. A total of 1'633'984 sequences, although not all of them unique, can be constructed by using the 121 transforms. To reduce the amount of bias the static dictionary gives to the results, we used a multilingual web corpus of 93 different languages where only 122 of the 1285 documents (9.5 %) are in languages supported by our static dictionary.</p><p xml:id="_HFtzm3T">In averaging over the results of individual files and over the corpora we chose to use geometric mean instead of the more common arithmetic mean. The geometric mean gives a bit more weight for poor performance, i.e., if a particular algorithm compresses one file type extremely fast or densely, it will not be propagated into the results as strongly as with an arithmetic mean.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head xml:id="_snHJk9D">Results</head><p xml:id="_MGGfKKx">Tables 1, 2 and 3 show the results of three different corpora. Figure <ref type="figure" coords="3,403.17,120.38,6.11,10.20" target="#fig_0">1</ref> shows the decompression speed vs. compression ratio on Canterbury corpus, showing graphically some of the results from Table <ref type="table" coords="3,127.59,150.38,4.58,10.20" target="#tab_0">1</ref>. We can see from the tables that brotli at quality setting 1 (shorthand notation in this document brotli:1) compresses and decompresses roughly the same speed as deflate:1, but offers 12-16 % higher compression ratio. Brotli:9 is again roughly similar with deflate:9 on the Canterbury and web content corpora, but gives a speed increase of 28 % in decoding of enwik8, and a compression ratio increase of 13 -21 %. Brotli:11 is significantly faster in compression than zopfli and gives 20-26 % higher compression ratio.</p><p xml:id="_7PEUEkT">Brotli gives slightly faster decompression than deflate for the tested corpora, while other advanced algorithms (LZMA, LZHAM and bzip2) are slower than deflate. The geometric means for all reported decompression speeds in the table are 342.2 MB/s for brotli and 323.6 MB/s for deflate, a 5.7 % advantage for brotli.</p><p xml:id="_gmar22v">In compression brotli:1 is similarly 5.7 % faster than deflate:1, but brotli:9 happens to be 32.3 % slower than deflate:9. However, one should not compare compression speed simply by the quality setting. A more useful comparison is to consider compression speed for an aimed compression ratio. Often brotli:1 is close to deflate:9, and sometimes even exceeding its compression ratio. For example, when compressing the Canterbury corpus down to 3.3 ratio one could use either brotli:1 at 98.3 MB/s or deflate:9 at 15.5 MB/s. LZMA can compress enwik8 with a 2.5 % higher compression ratio, but that comes with a penalty of 3.5 times longer decompression time. LZHAM:4 is somewhat similar in performance with brotli:11: 1 % higher compression ratio at a cost of 25 % slower decompression speed. On shorter files, like Canterbury corpus and web documents, brotli's compression ratios are unmatched by LZMA and LZHAM.</p><p xml:id="_CR4FM2A">Bzip2 was able to compress some text files rather well, but in the overall results it falls behind.   Brotli uses a static dictionary that can be helpful for compressing short files. Other algorithms could be easily modified to do the same, and they would obtain slightly better compression ratios. For a long file like enwik8 a static dictionary is not very helpful. Canterbury corpus contains short documents with English, and there brotli's static dictionary might be giving it an unfair advantage.</p><p xml:id="_YHKpyaz">Our results indicate that brotli, and only brotli out of all the benchmarked algorithms, would be a good replacement for the common use cases of the deflate algorithm in all three aspects, compression ratio, compression speed, and decompression speed.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0" coords="4,72.00,671.63,467.58,10.20;4,72.00,686.63,467.89,10.20;4,72.00,701.63,98.37,10.20;4,129.00,381.00,354.00,283.50"><head>Figure 1 .</head><label>1</label><figDesc xml:id="_xQJs7V9">Figure 1. The decompression speed vs. compression ratio of the Canterbury corpus as a scatter plot. For the decompression speed vs. compression ratio, brotli:9 and brotli:11 form the paretooptimal front.</figDesc><graphic coords="4,129.00,381.00,354.00,283.50" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" coords="4,72.00,74.63,463.11,285.99"><head>Table 1 .</head><label>1</label><figDesc xml:id="_R49spS9">This table shows the results of compression algorithms on the Canterbury corpus. The Canterbury corpus contains 11 files, and we show the geometric mean for the measured attributes: compression ratio, compression speed and decompression speed.</figDesc><table coords="4,100.50,121.84,372.75,238.77"><row><cell>Algorithm:</cell><cell>Compression</cell><cell>Compression speed</cell><cell>Decompression</cell></row><row><cell>quality setting</cell><cell>ratio</cell><cell>[MB/s]</cell><cell>speed [MB/s]</cell></row><row><cell>brotli:1</cell><cell>3.381</cell><cell>98.3</cell><cell>334.0</cell></row><row><cell>brotli:9</cell><cell>3.965</cell><cell>17.0</cell><cell>354.5</cell></row><row><cell>brotli:11</cell><cell>4.347</cell><cell>0.5</cell><cell>289.5</cell></row><row><cell>deflate:1</cell><cell>2.913</cell><cell>93.5</cell><cell>323.0</cell></row><row><cell>deflate:9</cell><cell>3.371</cell><cell>15.5</cell><cell>347.3</cell></row><row><cell>zopfli</cell><cell>3.580</cell><cell>0.2</cell><cell>342.1</cell></row><row><cell>lzma:1</cell><cell>3.847</cell><cell>10.2</cell><cell>70.0</cell></row><row><cell>lzma:9</cell><cell>4.240</cell><cell>3.9</cell><cell>71.7</cell></row><row><cell>lzham:1</cell><cell>3.836</cell><cell>3.9</cell><cell>116.0</cell></row><row><cell>lzham:4</cell><cell>3.952</cell><cell>0.5</cell><cell>117.7</cell></row><row><cell>bzip2:1</cell><cell>3.757</cell><cell>11.8</cell><cell>40.4</cell></row><row><cell>bzip2:9</cell><cell>3.869</cell><cell>12.0</cell><cell>40.2</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" coords="5,72.00,119.63,446.61,270.99"><head>Table 2 .</head><label>2</label><figDesc xml:id="_gdNFqff">Results of the compression algorithms on a sample of documents crawled from the Internet. The sample consists of 1285 HTML documents, with 93 different languages.</figDesc><table coords="5,102.75,151.84,370.50,238.78"><row><cell>Algorithm:</cell><cell>Compression</cell><cell>Compression speed</cell><cell>Decompression</cell></row><row><cell>quality setting</cell><cell>ratio</cell><cell>[MB/s]</cell><cell>speed [MB/s]</cell></row><row><cell>brotli:1</cell><cell>5.217</cell><cell>145.2</cell><cell>508.4</cell></row><row><cell>brotli:9</cell><cell>6.253</cell><cell>30.1</cell><cell>508.7</cell></row><row><cell>brotli:11</cell><cell>6.938</cell><cell>0.6</cell><cell>441.8</cell></row><row><cell>deflate:1</cell><cell>4.666</cell><cell>146.9</cell><cell>434.8</cell></row><row><cell>deflate:9</cell><cell>5.528</cell><cell>32.9</cell><cell>484.1</cell></row><row><cell>zopfli</cell><cell>5.770</cell><cell>0.2</cell><cell>460.1</cell></row><row><cell>lzma:1</cell><cell>5.825</cell><cell>7.9</cell><cell>100.5</cell></row><row><cell>lzma:9</cell><cell>6.231</cell><cell>4.4</cell><cell>102.2</cell></row><row><cell>lzham:1</cell><cell>5.580</cell><cell>4.7</cell><cell>168.7</cell></row><row><cell>lzham:4</cell><cell>5.768</cell><cell>0.2</cell><cell>172.7</cell></row><row><cell>bzip2:1</cell><cell>5.710</cell><cell>11.0</cell><cell>52.3</cell></row><row><cell>bzip2:9</cell><cell>5.867</cell><cell>11.1</cell><cell>52.3</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" coords="5,72.00,412.13,401.25,255.99"><head>Table 3 .</head><label>3</label><figDesc xml:id="_JqxTfzU">Results of different compression algorithms on the enwik8 file. comparisons are done with a fixed width (22 bits) backward reference window. Other algorithms could possibly benefit from different widths. LZMA and LZHAM are commonly applied with a larger window. In this study we are looking for a replacement candidate algorithm for the deflate algorithm, and a larger window could slow down encoding and decoding as well as use more memory during decoding. Applying the same backward reference window size in LZMA, LZHAM and brotli removes one complication from the comparison.</figDesc><table coords="5,102.00,429.34,371.25,238.77"><row><cell>Algorithm:</cell><cell>Compression</cell><cell>Compression speed</cell><cell>Decompression</cell></row><row><cell>quality setting</cell><cell>ratio</cell><cell>[MB/s]</cell><cell>speed [MB/s]</cell></row><row><cell>brotli:1</cell><cell>2.711</cell><cell>78.3</cell><cell>228.6</cell></row><row><cell>brotli:9</cell><cell>3.308</cell><cell>5.6</cell><cell>279.4</cell></row><row><cell>brotli:11</cell><cell>3.607</cell><cell>0.4</cell><cell>257.4</cell></row><row><cell>deflate:1</cell><cell>2.364</cell><cell>70.8</cell><cell>211.7</cell></row><row><cell>deflate:9</cell><cell>2.742</cell><cell>18.1</cell><cell>217.4</cell></row><row><cell>zopfli</cell><cell>2.857</cell><cell>0.6</cell><cell>227.7</cell></row><row><cell>lzma:1</cell><cell>3.106</cell><cell>9.8</cell><cell>60.6</cell></row><row><cell>lzma:9</cell><cell>3.696</cell><cell>3.44</cell><cell>71.8</cell></row><row><cell>lzham:1</cell><cell>3.335</cell><cell>2.4</cell><cell>177.9</cell></row><row><cell>lzham:4</cell><cell>3.643</cell><cell>0.4</cell><cell>192.2</cell></row><row><cell>bzip2:1</cell><cell>3.007</cell><cell>12.3</cell><cell>30.8</cell></row><row><cell>bzip2:9</cell><cell>3.447</cell><cell>12.4</cell><cell>30.3</cell></row></table><note xml:id="_WBqMESr">These</note></figure>
		</body>
		<back>
			<div type="references">

				<listBibl/>
			</div>
		</back>
	</text>
</TEI>
